/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.17.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, QueryMsg, Addr, AssignerResponse, CheckmarkBannedResponse, CountResponse, GetAddressResponse, GetCheckmarkResponse, OwnershipForString } from "./CwCheckmark.types";
export interface CwCheckmarkMessage {
  contractAddress: string;
  sender: string;
  assign: ({
    address,
    checkmarkId
  }: {
    address: string;
    checkmarkId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  delete: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revokeCheckmark: ({
    checkmarkId
  }: {
    checkmarkId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revokeAddress: ({
    address
  }: {
    address: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCheckmarkBan: ({
    banIds,
    unbanIds
  }: {
    banIds?: string[];
    unbanIds?: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAssigner: ({
    assigner
  }: {
    assigner: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CwCheckmarkMessageComposer implements CwCheckmarkMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.assign = this.assign.bind(this);
    this.delete = this.delete.bind(this);
    this.revokeCheckmark = this.revokeCheckmark.bind(this);
    this.revokeAddress = this.revokeAddress.bind(this);
    this.updateCheckmarkBan = this.updateCheckmarkBan.bind(this);
    this.updateAssigner = this.updateAssigner.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  assign = ({
    address,
    checkmarkId
  }: {
    address: string;
    checkmarkId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          assign: {
            address,
            checkmark_id: checkmarkId
          }
        })),
        funds
      })
    };
  };
  delete = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          delete: {}
        })),
        funds
      })
    };
  };
  revokeCheckmark = ({
    checkmarkId
  }: {
    checkmarkId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke_checkmark: {
            checkmark_id: checkmarkId
          }
        })),
        funds
      })
    };
  };
  revokeAddress = ({
    address
  }: {
    address: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke_address: {
            address
          }
        })),
        funds
      })
    };
  };
  updateCheckmarkBan = ({
    banIds,
    unbanIds
  }: {
    banIds?: string[];
    unbanIds?: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_checkmark_ban: {
            ban_ids: banIds,
            unban_ids: unbanIds
          }
        })),
        funds
      })
    };
  };
  updateAssigner = ({
    assigner
  }: {
    assigner: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_assigner: {
            assigner
          }
        })),
        funds
      })
    };
  };
  updateOwnership = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_ownership: {}
        })),
        funds
      })
    };
  };
}