/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.17.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, QueryMsg, Addr, AssignerResponse, CheckmarkBannedResponse, CountResponse, GetAddressResponse, GetCheckmarkResponse, OwnershipForString } from "./CwCheckmark.types";
import { CwCheckmarkQueryClient } from "./CwCheckmark.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<CwCheckmarkQueryClient, QueryClientParams>({
  key: "cwCheckmarkQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new CwCheckmarkQueryClient(client, contractAddress);
  }
});
export const getCheckmarkSelector = selectorFamily<GetCheckmarkResponse, QueryClientParams & {
  params: Parameters<CwCheckmarkQueryClient["getCheckmark"]>;
}>({
  key: "cwCheckmarkGetCheckmark",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.getCheckmark(...params);
  }
});
export const getAddressSelector = selectorFamily<GetAddressResponse, QueryClientParams & {
  params: Parameters<CwCheckmarkQueryClient["getAddress"]>;
}>({
  key: "cwCheckmarkGetAddress",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.getAddress(...params);
  }
});
export const countSelector = selectorFamily<CountResponse, QueryClientParams & {
  params: Parameters<CwCheckmarkQueryClient["count"]>;
}>({
  key: "cwCheckmarkCount",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.count(...params);
  }
});
export const checkmarkBannedSelector = selectorFamily<CheckmarkBannedResponse, QueryClientParams & {
  params: Parameters<CwCheckmarkQueryClient["checkmarkBanned"]>;
}>({
  key: "cwCheckmarkCheckmarkBanned",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.checkmarkBanned(...params);
  }
});
export const assignerSelector = selectorFamily<AssignerResponse, QueryClientParams & {
  params: Parameters<CwCheckmarkQueryClient["assigner"]>;
}>({
  key: "cwCheckmarkAssigner",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.assigner(...params);
  }
});
export const ownershipSelector = selectorFamily<OwnershipForString, QueryClientParams & {
  params: Parameters<CwCheckmarkQueryClient["ownership"]>;
}>({
  key: "cwCheckmarkOwnership",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownership(...params);
  }
});