/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.17.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, QueryMsg, Addr, AssignerResponse, CheckmarkBannedResponse, CountResponse, GetAddressResponse, GetCheckmarkResponse, OwnershipForString } from "./CwCheckmark.types";
import { CwCheckmarkQueryClient, CwCheckmarkClient } from "./CwCheckmark.client";
export const cwCheckmarkQueryKeys = {
  contract: ([{
    contract: "cwCheckmark"
  }] as const),
  address: (contractAddress: string) => ([{ ...cwCheckmarkQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getCheckmark: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwCheckmarkQueryKeys.address(contractAddress)[0],
    method: "get_checkmark",
    args
  }] as const),
  getAddress: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwCheckmarkQueryKeys.address(contractAddress)[0],
    method: "get_address",
    args
  }] as const),
  count: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwCheckmarkQueryKeys.address(contractAddress)[0],
    method: "count",
    args
  }] as const),
  checkmarkBanned: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwCheckmarkQueryKeys.address(contractAddress)[0],
    method: "checkmark_banned",
    args
  }] as const),
  assigner: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwCheckmarkQueryKeys.address(contractAddress)[0],
    method: "assigner",
    args
  }] as const),
  ownership: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwCheckmarkQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export interface CwCheckmarkReactQuery<TResponse, TData = TResponse> {
  client: CwCheckmarkQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwCheckmarkOwnershipQuery<TData> extends CwCheckmarkReactQuery<OwnershipForString, TData> {}
export function useCwCheckmarkOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: CwCheckmarkOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(cwCheckmarkQueryKeys.ownership(client.contractAddress), () => client.ownership(), options);
}
export interface CwCheckmarkAssignerQuery<TData> extends CwCheckmarkReactQuery<AssignerResponse, TData> {}
export function useCwCheckmarkAssignerQuery<TData = AssignerResponse>({
  client,
  options
}: CwCheckmarkAssignerQuery<TData>) {
  return useQuery<AssignerResponse, Error, TData>(cwCheckmarkQueryKeys.assigner(client.contractAddress), () => client.assigner(), options);
}
export interface CwCheckmarkCheckmarkBannedQuery<TData> extends CwCheckmarkReactQuery<CheckmarkBannedResponse, TData> {
  args: {
    checkmarkId: string;
  };
}
export function useCwCheckmarkCheckmarkBannedQuery<TData = CheckmarkBannedResponse>({
  client,
  args,
  options
}: CwCheckmarkCheckmarkBannedQuery<TData>) {
  return useQuery<CheckmarkBannedResponse, Error, TData>(cwCheckmarkQueryKeys.checkmarkBanned(client.contractAddress, args), () => client.checkmarkBanned({
    checkmarkId: args.checkmarkId
  }), options);
}
export interface CwCheckmarkCountQuery<TData> extends CwCheckmarkReactQuery<CountResponse, TData> {}
export function useCwCheckmarkCountQuery<TData = CountResponse>({
  client,
  options
}: CwCheckmarkCountQuery<TData>) {
  return useQuery<CountResponse, Error, TData>(cwCheckmarkQueryKeys.count(client.contractAddress), () => client.count(), options);
}
export interface CwCheckmarkGetAddressQuery<TData> extends CwCheckmarkReactQuery<GetAddressResponse, TData> {
  args: {
    checkmarkId: string;
  };
}
export function useCwCheckmarkGetAddressQuery<TData = GetAddressResponse>({
  client,
  args,
  options
}: CwCheckmarkGetAddressQuery<TData>) {
  return useQuery<GetAddressResponse, Error, TData>(cwCheckmarkQueryKeys.getAddress(client.contractAddress, args), () => client.getAddress({
    checkmarkId: args.checkmarkId
  }), options);
}
export interface CwCheckmarkGetCheckmarkQuery<TData> extends CwCheckmarkReactQuery<GetCheckmarkResponse, TData> {
  args: {
    address: string;
  };
}
export function useCwCheckmarkGetCheckmarkQuery<TData = GetCheckmarkResponse>({
  client,
  args,
  options
}: CwCheckmarkGetCheckmarkQuery<TData>) {
  return useQuery<GetCheckmarkResponse, Error, TData>(cwCheckmarkQueryKeys.getCheckmark(client.contractAddress, args), () => client.getCheckmark({
    address: args.address
  }), options);
}
export interface CwCheckmarkUpdateOwnershipMutation {
  client: CwCheckmarkClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface CwCheckmarkUpdateAssignerMutation {
  client: CwCheckmarkClient;
  msg: {
    assigner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkUpdateAssignerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkUpdateAssignerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkUpdateAssignerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAssigner(msg, fee, memo, funds), options);
}
export interface CwCheckmarkUpdateCheckmarkBanMutation {
  client: CwCheckmarkClient;
  msg: {
    banIds?: string[];
    unbanIds?: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkUpdateCheckmarkBanMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkUpdateCheckmarkBanMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkUpdateCheckmarkBanMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCheckmarkBan(msg, fee, memo, funds), options);
}
export interface CwCheckmarkRevokeAddressMutation {
  client: CwCheckmarkClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkRevokeAddressMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkRevokeAddressMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkRevokeAddressMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAddress(msg, fee, memo, funds), options);
}
export interface CwCheckmarkRevokeCheckmarkMutation {
  client: CwCheckmarkClient;
  msg: {
    checkmarkId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkRevokeCheckmarkMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkRevokeCheckmarkMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkRevokeCheckmarkMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeCheckmark(msg, fee, memo, funds), options);
}
export interface CwCheckmarkDeleteMutation {
  client: CwCheckmarkClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkDeleteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkDeleteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkDeleteMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.delete(fee, memo, funds), options);
}
export interface CwCheckmarkAssignMutation {
  client: CwCheckmarkClient;
  msg: {
    address: string;
    checkmarkId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwCheckmarkAssignMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwCheckmarkAssignMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwCheckmarkAssignMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.assign(msg, fee, memo, funds), options);
}